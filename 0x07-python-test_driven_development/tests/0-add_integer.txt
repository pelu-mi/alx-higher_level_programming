# 0-add_integer.txt

===========================
How to Use 0-add_integer.py
===========================

This module defines an integer addition function ``add_integer(a, b=98)``.

Usage
=====

``add_integer(...)`` returns the sum of its arguments. This was designed
to work with integers and floats only.

::

>>> add_integer = __import__('0-add_integer').add_integer
>>> add_integer(1, 2)
3

It also works with Negative Numbers

::

>>> add_integer(1, -2)
-1

For Floats, the values are first converted to integers before being summed

::

>>> add_integer(2.0, 3.0)
5
>>> add_integer(2.5, -4.5)
-2

Integers and floats can be combined

::

>>> add_integer(2.5, 3)
5
>>> add_integer(-2, 1.2)
-1

The second argument is optional. It's default value is 98

::

>>> add_integer(1)
99
>>> add_integer(-1.5)
97

Non-Numbers
=================

``add_integer(...)`` expects that both inputs are either integers or floats.
If either argument is not an int or a float, a TypeError is raised.

::

>>> add_integer("", 2)
Traceback (most recent call last):
TypeError: a must be an integer

::

>>> add_integer(1, "")
Traceback (most recent call last):
TypeError: b must be an integer

::

>>> add_integer(None)
Traceback (most recent call last):
TypeError: a must be an integer

::

>>> add_integer(1.6, None)
Traceback (most recent call last):
TypeError: b must be an integer

If both arguments are non-ints or non-floats, the TypeError is raised for
the first value only.

::

>>> add_integer("", None)
Traceback (most recent call last):
TypeError: a must be an integer

::

>>> add_integer([], "")
Traceback (most recent call last):
TypeError: a must be an integer

The Function also fails if infinity is provided as an input

::

>>> add_integer(float('inf'))
Traceback (most recent call last):
OverflowError: cannot convert float infinity to integer

The same happens with NaN.

::

>>> add_integer(float('nan'))
Traceback (most recent call last):
ValueError: cannot convert float NaN to integer
